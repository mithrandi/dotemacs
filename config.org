#+TITLE: DotEmacs
#+AUTHOR: Tristan Seligmann
#+PROPERTY: header-args  :tangle yes

* Table of Content                                                      :TOC:
- [[#bootstrap][Bootstrap]]
  - [[#global-stuff][Global stuff]]
  - [[#themes][Themes]]
  - [[#modeline][Modeline]]
  - [[#hydra][Hydra]]
  - [[#midnight-mode][Midnight mode]]
  - [[#line--column-numbers][Line / column numbers]]
  - [[#secrets][Secrets]]
- [[#packages][Packages]]
  - [[#autorevert][Autorevert]]
  - [[#org][Org]]
  - [[#autocomplete][Autocomplete]]
  - [[#debian-stuff][Debian stuff]]
  - [[#magit][Magit]]
  - [[#which-key][=which-key=]]
  - [[#whitespace][Whitespace]]
  - [[#ivy][Ivy]]
  - [[#projectile][Projectile]]
- [[#languages][Languages]]
  - [[#lsp][LSP]]
  - [[#lisps][Lisps]]
  - [[#javascript][JavaScript]]
  - [[#css][CSS]]
  - [[#go][Go]]
  - [[#misc-modes][Misc modes]]
  - [[#flycheck][Flycheck]]
  - [[#python][Python]]
  - [[#dhall][Dhall]]
- [[#the-remaining-mess][The remaining mess]]

* Bootstrap

** Global stuff

*** Garbage collector and other tweaks

    #+BEGIN_SRC emacs-lisp
      ;; (add-to-list 'default-frame-alist '(menu-bar-lines . 0))
      (add-to-list 'default-frame-alist '(tool-bar-lines . 0))
      ;; (add-to-list 'default-frame-alist '(vertical-scroll-bars))
      (setq frame-inhibit-implied-resize t
            initial-major-mode 'fundamental-mode
            gc-cons-threshold most-positive-fixnum
            read-process-output-max (* 1024 1024))
      (use-package gcmh
        :diminish
        :defer 5
        :init
        (setq gcmh-idle-delay 5
              gcmh-high-cons-threshold (* 16 1024 1024))
        :config
        (gcmh-mode 1))
      (add-hook 'focus-out-hook #'garbage-collect)
      (add-to-list 'initial-frame-alist '(fullscreen . maximized))
    #+END_SRC

*** Defaults

    #+begin_src emacs-lisp
      (setq-default auto-save-default nil
                    create-lockfiles nil
                    fill-column 79
                    gnutls-verify-error t
                    indent-tabs-mode nil
                    make-backup-files nil
                    require-final-newline 'visit
                    sentence-end-double-space nil
                    show-trailing-whitespace t)
    #+end_src

*** Async byte-comp

    #+begin_src emacs-lisp
      (use-package async
        :demand
        :config
        (async-bytecomp-package-mode 1))
    #+end_src

*** Enable keybinding

    #+BEGIN_SRC emacs-lisp
      (use-package diminish)
      (require 'bind-key)
    #+END_SRC

*** Snag shell configuration

    Use =exec-path-from-shell= rather than duplicating things.

    #+BEGIN_SRC emacs-lisp
      (use-package exec-path-from-shell
        :config
        (setq exec-path-from-shell-check-startup-files nil
              exec-path-from-shell-variables '("PATH" "GOPATH" "DEBEMAIL" "DEBFULLNAME")
              exec-path-from-shell-arguments nil)
        (exec-path-from-shell-initialize))
    #+END_SRC

*** Emacs server

    Run in server mode so we can edit things with emacsclient.

    #+begin_src emacs-lisp
      (when window-system
        (add-hook 'after-init-hook 'server-start t))
    #+end_src

*** Desktop save / restore

    #+begin_src emacs-lisp
      (use-package emacs
        :custom
        (desktop-save t)
        (desktop-load-locked-desktop t)
        :init
        (defun rgr/restore-desktop()
          (when (fboundp 'alert)
            (alert (message (format "loading desktop from %s" desktop-path))))
          ;;I include the run-with-timer despite being able to get this to work without as it's a timing
          ;;issue and a little delay does no one any harm
          (run-at-time "1" nil (lambda()
                                 (desktop-read)
                                 (desktop-save-mode 1))))
        (add-hook 'emacs-startup-hook
                  (lambda()
                    (if (daemonp)
                        (add-hook 'server-after-make-frame-hook 'rgr/restore-desktop)
                      (rgr/restore-desktop)))))
    #+end_src

** Themes

   #+begin_src emacs-lisp
     (use-package doom-themes
       :config
       (setq doom-themes-enable-bold t
             doom-themes-enable-italic t)
       (load-theme 'doom-solarized-dark t)
       (doom-themes-visual-bell-config)
       (doom-themes-neotree-config)
       (setq doom-themes-treemacs-theme "doom-colors")
       (doom-themes-treemacs-config)
       (doom-themes-org-config))
   #+end_src

** Modeline

   #+begin_src emacs-lisp
     (use-package all-the-icons
       :if (display-graphic-p))
     (use-package doom-modeline
       :demand
       :config
       (setq doom-modeline-minor-modes t)
       (doom-modeline-mode 1))
   #+end_src

** Hydra

   Cool keybinding thing.

   #+begin_src emacs-lisp
     (use-package hydra)
     (use-package use-package-hydra
       :after hydra)
   #+end_src

** Midnight mode

   Clean up idle buffers at midnight.

   #+begin_src emacs-lisp
     (use-package midnight
       :defer 5
       :config
       (midnight-mode t)
       (setq clean-buffer-list-delay-general 1))
   #+end_src

** Line / column numbers

   #+begin_src emacs-lisp
     (global-display-line-numbers-mode t)
     (column-number-mode t)
   #+end_src

** Secrets

   #+begin_src emacs-lisp
     (use-package secrets)
     (use-package auth-source
       :after secrets
       :custom
       (auth-sources
        '("secrets:Login" "~/.authinfo" "~/.authinfo.gpg" "~/.netrc")))
   #+end_src

* Packages

** Autorevert

   This reverts unmodified buffers when the file changes externally. Without
   this they would become modified buffers with the old content.

   #+BEGIN_SRC emacs-lisp
     (use-package autorevert
       :config
       ;; Also auto refresh dired, but be quiet about it
       (setq global-auto-revert-non-file-buffers t)
       (setq auto-revert-verbose nil)
       :custom
       (global-auto-revert-mode t))
   #+END_SRC

** Org

   This file is organized with =org-mode=.

   #+BEGIN_SRC emacs-lisp
     (use-package org
       :config
       (setq org-log-done 'time
             org-support-shift-select t)
       (require 'org-tempo)
       :hook ((org-mode . toc-org-enable))
       :bind
       (:map org-mode-map
             ("<" . (lambda () (interactive)
                      (if (or (region-active-p) (looking-back "^\\s-*" (line-beginning-position)))
                          (hydra-org-template/body)
                        (self-insert-command 1)))))
       :hydra
       ;; From https://github.com/abo-abo/hydra/wiki/Org-mode-block-templates
       (hydra-org-template
        (:color blue :hint nil)
        "
      _c_enter  _q_uote     _e_macs-lisp    _L_aTeX:
      _l_atex   _E_xample   _p_erl          _i_ndex:
      _a_scii   _v_erse     _P_erl tangled  _I_NCLUDE:
      _s_rc     _n_ote      plant_u_ml      _H_TML:
      _h_tml    ^ ^         ^ ^             _A_SCII:
     "
        ("s" (hot-expand "<s"))
        ("E" (hot-expand "<e"))
        ("q" (hot-expand "<q"))
        ("v" (hot-expand "<v"))
        ("n" (hot-expand "<note"))
        ("c" (hot-expand "<c"))
        ("l" (hot-expand "<l"))
        ("h" (hot-expand "<h"))
        ("a" (hot-expand "<a"))
        ("L" (hot-expand "<L"))
        ("i" (hot-expand "<i"))
        ("e" (hot-expand "<s" "emacs-lisp"))
        ("p" (hot-expand "<s" "perl"))
        ("u" (hot-expand "<s" "plantuml :file CHANGE.png"))
        ("P" (hot-expand "<s" "perl" ":results output :exports both :shebang \"#!/usr/bin/env perl\"\n"))
        ("I" (hot-expand "<I"))
        ("H" (hot-expand "<H"))
        ("A" (hot-expand "<A"))
        ("<" self-insert-command "ins")
        ("o" nil "quit")))

     (defun hot-expand (str &optional mod header)
       "Expand org template.

     STR is a structure template string recognised by org like <s. MOD is a
     string with additional parameters to add the begin line of the
     structure element. HEADER string includes more parameters that are
     prepended to the element after the #+HEADER: tag."
       (let (text)
         (when (region-active-p)
           (setq text (buffer-substring (region-beginning) (region-end)))
           (delete-region (region-beginning) (region-end))
           (deactivate-mark))
         (when header (insert "#+HEADER: " header) (forward-line))
         (insert str)
         (org-tempo-complete-tag)
         (when mod (insert mod) (forward-line))
         (when text (insert text))))
   #+END_SRC

   Maintain a TOC at the first heading that has a =:TOC:= tag.

   #+BEGIN_SRC emacs-lisp
     (use-package toc-org :after org)
   #+END_SRC

** Autocomplete

   I use company for this.

   #+begin_src emacs-lisp
     (use-package company
       :diminish company-mode
       :defer 5
       :config
       (global-company-mode 1)
       (setq company-minimum-prefix-length 1
             company-idle-delay 0.1))
   #+end_src

** Debian stuff

   #+begin_src emacs-lisp
     (use-package debian-el)
     (use-package dpkg-dev-el
       :mode
       ("/debian/*NEWS" . debian-changelog-mode)
       ("NEWS.Debian" . debian-changelog-mode)
       ("/debian/\\([[:lower:][:digit:]][[:lower:][:digit:].+-]+\\.\\)?changelog\\'" . debian-changelog-mode)
       ("changelog.Debian" . debian-changelog-mode)
       ("changelog.dch" . debian-changelog-mode)
       ("/debian/control\\'" . debian-control-mode)
       ("debian/.*copyright\\'" . debian-copyright-mode)
       ("\\`/usr/share/doc/.*/copyright" . debian-copyright-mode)
       ("debian/.*README.*Debian$" . readme-debian-mode)
       ("^/usr/share/doc/.*/README.*Debian.*$" . readme-debian-mode))
     (straight-use-package '(debian-devel :local-repo "~/src/github.com/mithrandi/debian-devel-el"
                                          :files ("debian-devel/*.el")))
     (use-package debian-devel
       :straight nil
       :bind ("C-c d" . dd-dispatch))
   #+end_src

** Magit

   The most awesome git frontend.

   #+begin_src emacs-lisp
     (use-package magit
       :bind ("C-x g" . magit-status)
       :custom
       (magit-branch-prefer-remote-upstream (quote ("master")))
       (magit-diff-arguments (quote ("--no-ext-diff" "--stat" "-M20%" "-C20%")))
       (magit-diff-section-arguments (quote ("--no-ext-diff" "-M20%" "-C20%")))
       (magit-fetch-arguments (quote ("--prune")))
       (magit-wip-after-apply-mode t)
       (magit-wip-after-save-mode t)
       (magit-wip-before-change-mode t))
     (use-package forge
       :after magit)
     (use-package magit-delta
       :hook (magit-mode . magit-delta-mode))
     (use-package smerge-mode
       :config
       (defhydra smerge-hydra
         (:color pink :hint nil :post (smerge-auto-leave))
         "
     ^Move^       ^Keep^               ^Diff^                 ^Other^
     ^^-----------^^-------------------^^---------------------^^-------
     _n_ext       _b_ase               _<_: upper/base        _C_ombine
     _p_rev       _u_pper              _=_: upper/lower       _r_esolve
     ^^           _l_ower              _>_: base/lower        _k_ill current
     ^^           _a_ll                _R_efine
     ^^           _RET_: current       _E_diff
     "
         ("n" smerge-next)
         ("p" smerge-prev)
         ("b" smerge-keep-base)
         ("u" smerge-keep-upper)
         ("l" smerge-keep-lower)
         ("a" smerge-keep-all)
         ("RET" smerge-keep-current)
         ("\C-m" smerge-keep-current)
         ("<" smerge-diff-base-upper)
         ("=" smerge-diff-upper-lower)
         (">" smerge-diff-base-lower)
         ("R" smerge-refine)
         ("E" smerge-ediff)
         ("C" smerge-combine-with-next)
         ("r" smerge-resolve)
         ("k" smerge-kill-current)
         ("ZZ" (lambda ()
                 (interactive)
                 (save-buffer)
                 (bury-buffer))
          "Save and bury buffer" :color blue)
         ("q" nil "cancel" :color blue))
       :hook (magit-diff-visit-file . (lambda ()
                                        (when smerge-mode
                                          (smerge-hydra/body)))))
   #+end_src

** =which-key=

   A minor mode that shows possible binds midway through a sequence.

   #+begin_src emacs-lisp
     (use-package which-key
       :diminish
       :defer 5
       :config
       (which-key-mode 1))
   #+end_src

** Whitespace

   Highlight and clean up excess whitespace.

   #+begin_src emacs-lisp
     (use-package whitespace
       :defer 5
       :diminish
       (whitespace-mode
        global-whitespace-mode)
       :config
       (setq whitespace-line-column 80
             whitespace-style '(face lines-tail))
       (global-whitespace-mode)
       :hook
       (python-mode . (lambda ()
                        (setq-local whitespace-line-column 88))))
     (use-package whitespace-cleanup-mode
       :defer 5
       :diminish
       (whitespace-cleanup-mode
        global-whitespace-cleanup-mode)
       :init
       (setq whitespace-cleanup-mode-only-if-initially-clean nil)
       :config
       (global-whitespace-cleanup-mode))
   #+end_src

** Ivy

   Completion stuff.

   #+begin_src emacs-lisp
     (use-package ivy
       :diminish ivy-mode
       :defer 5
       :config
       (setq ivy-use-virtual-buffers t
             ivy-count-format "(%d/%d) ")
       (ivy-mode 1))
     (use-package ivy-hydra
       :after hydra)
     (use-package counsel
       :diminish counsel-mode
       :after ivy
       :custom
       (counsel-outline-face-style 'org)
       (counsel-outline-path-separator " / ")
       :config
       (counsel-mode 1))
     (use-package counsel-projectile
       :after ivy
       :config
       (counsel-projectile-mode 1))
   #+end_src

** Projectile

   "Project" management.

   #+begin_src emacs-lisp
     (use-package projectile
       :bind-keymap
       ("s-p" . projectile-command-map)
       ("C-c p" . projectile-command-map))
   #+end_src

* Languages

** LSP

   LSP is a standardized protocol for editors to connect to IDE-like backends.

    #+begin_src emacs-lisp
      (use-package yasnippet
        :config
        (yas-global-mode 1))
      (use-package lsp-mode
        :init (setq lsp-keymap-prefix "C-l")
        :hook
        ((lsp-mode . lsp-enable-which-key-integration)
         (before-save . (lambda ()
                          (when (bound-and-true-p lsp-mode)
                            (lsp-organize-imports)
                            (lsp-format-buffer)))))
        :config (define-key lsp-mode-map (kbd "C-l") lsp-command-map)
        :commands (lsp lsp-deferred)
        :custom
        (lsp-file-watch-ignored
         (quote
          ("[/\\\\]\\.git$" "[/\\\\]\\.hg$" "[/\\\\]\\.bzr$" "[/\\\\]_darcs$" "[/\\\\]\\.svn$" "[/\\\\]_FOSSIL_$" "[/\\\\]\\.idea$" "[/\\\\]\\.ensime_cache$" "[/\\\\]\\.eunit$" "[/\\\\]node_modules$" "[/\\\\]\\.fslckout$" "[/\\\\]\\.tox$" "[/\\\\]\\.stack-work$" "[/\\\\]\\.bloop$" "[/\\\\]\\.metals$" "[/\\\\]target$" "[/\\\\]\\.deps$" "[/\\\\]build-aux$" "[/\\\\]autom4te.cache$" "[/\\\\]\\.reference$" "[/\\\\]dist$" "[/\\\\]dist-newstyle$")))
        (lsp-prefer-flymake nil))
      (use-package lsp-ui
        :after (flycheck lsp-mode)
        :diminish
        :config
        (setq lsp-ui-doc-use-webkit t)
        :commands lsp-ui-mode
        :custom
        (lsp-ui-doc-header nil)
        (lsp-ui-doc-include-signature nil)
        (lsp-ui-doc-position (quote at-point))
        (lsp-ui-doc-use-childframe t)
        (lsp-ui-doc-use-webkit nil)
        (lsp-ui-flycheck-enable t)
        (lsp-ui-sideline-ignore-duplicate t)
        (lsp-ui-sideline-show-hover t))
      (use-package haskell-mode
        :mode "\\.l?hs\\'"
        :custom
        (haskell-font-lock-symbols t)
        (haskell-indentation-show-indentations-after-eol nil))
      (use-package lsp-haskell
        :hook
        ((haskell-mode . lsp-deferred)
         (haskell-literate-mode . lsp-deferred))
        :config
        (setq lsp-haskell-process-path-hie "haskell-language-server-wrapper")
        (setq lsp-haskell-process-args-hie '())
        (with-eval-after-load 'lsp-mode
          (lsp-register-custom-settings '(("haskell.maxCompletions" 200)))))
      (use-package lsp-treemacs
        :commands lsp-treemacs-errors-list)
      (use-package company-lsp
        :after company
        :config (push 'company-lsp company-backends)
        :defer t
        :custom (company-lsp-cache-candidates 'auto))
    #+end_src

** Lisps

   #+begin_src emacs-lisp
     (use-package lispy
       :hook
       ((emacs-lisp-mode . lispy-mode)
        (clojure-mode . lispy-mode)))
     (use-package rainbow-delimiters
       :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
              (clojure-mode . rainbow-delimiters-mode)))
   #+end_src

*** TODO Clojure

    Need to add LSP stuff.

    #+begin_src emacs-lisp
      (use-package clojure-mode
        :mode "\\.clj\\'")
    #+end_src

** JavaScript

   #+begin_src emacs-lisp
     ;; (use-package js2-mode
     ;;   :mode "\\.js\\'")
     (use-package web-mode
       :mode "\\.jsx?\\'"
       :config
       (setq web-mode-content-types-alist
             '(("jsx" . "\\.jsx?\\'")))
       :custom
       (web-mode-code-indent-offset 2)
       (web-mode-markup-indent-offset 2))
   #+end_src

** CSS

   #+begin_src emacs-lisp
     (use-package sass-mode
       :mode "\\.sass\\'")
     (use-package scss-mode
       :mode "\\.scss\\'")
   #+end_src

** Go

   #+begin_src emacs-lisp
     (use-package go-mode
       :mode "\\.go\\'")
   #+end_src

** Misc modes

   A bunch of simple major modes.

   #+begin_src emacs-lisp
     (use-package csv-mode
       :mode "\\.csv\\'")
     (use-package dockerfile-mode
       :mode "Dockerfile\\'")
     (use-package fish-mode
       :mode "\\.fish\\'")
     (use-package markdown-mode
       :mode "\\.md\\'")
     (use-package toml-mode
       :mode "\\.toml\\'")
     (use-package yaml-mode
       :mode "\\.ya?ml\\'")
   #+end_src

** Flycheck

   #+begin_src emacs-lisp
     (use-package flycheck
       :hook
       ((python-mode . (lambda ()
                         (flycheck-select-checker 'python-flake8)
                         (flycheck-mode 1)))
        (emacs-lisp-mode . flycheck-mode)
        (haskell-mode . flycheck-mode)
        (web-mode . (lambda ()
                      (when (equal web-mode-content-type "jsx")
                        (flycheck-select-checker 'javascript-eslint)
                        (flycheck-mode 1))))
        (clojure-mode . flycheck-mode)
        (go-mode . flycheck-mode)
        (yaml-mode . flycheck-mode))
       :config
       (flycheck-add-mode 'javascript-eslint 'web-mode)
       :custom
       (flycheck-disabled-checkers
        '(python-pylint javascript-jshint haskell-ghc haskell-stack-ghc))
       (flycheck-eslintrc ".eslintrc.yaml")
       (flycheck-highlighting-mode (quote columns))
       (flycheck-hlintrc ".hlint.yaml"))
   #+end_src

** Python

   #+begin_src emacs-lisp
     (use-package python
       :mode ("\\.py\\'" . python-mode)
       :interpreter ("python" . python-mode))
     (use-package blacken
       :delight
       :hook (python-mode . blacken-mode)
       :custom (blacken-only-if-project-is-blackened t))
     (use-package pyvenv
       :hook (python-mode . (lambda ()
                              (let ((venv (f-expand
                                           (projectile-project-name)
                                           "~/deployment/virtualenvs/")))
                                (when (f-dir? venv)
                                  (setq-local pyvenv-activate venv)))
                              (pyvenv-mode t)))
       :config
       (pyvenv-tracking-mode t)
       (setq python-environment-directory "~/deployment/virtualenvs")
       :custom
       (pyvenv-mode-line-indicator
        '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "]"))))
     (use-package py-isort)
     (use-package python-docstring
       :hook (python-mode . python-docstring-mode))
     (use-package lsp-pyright
       :hook (python-mode . (lambda ()
                              (require 'lsp-pyright)
                              (lsp-deferred))))
   #+end_src

** Dhall

   #+begin_src emacs-lisp
     (use-package dhall-mode
       :config
       (setq
        ;; header-line is obsoleted by lsp-mode
        dhall-use-header-line nil)
       :hook (dhall-mode . lsp-deferred))
   #+end_src

* The remaining mess

  #+begin_src emacs-lisp
    (use-package dash)
    (use-package nix-mode)
    (use-package ormolu)
    (use-package terraform-mode
      :config
      (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode))

    (put 'test-case-name 'safe-local-variable 'symbolp)
  #+end_src

*** [[file:custom.el][custom.el]]

    Put customization in another file.

    #+BEGIN_SRC emacs-lisp
      (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
      (when (file-exists-p custom-file)
        (load custom-file))
    #+END_SRC
