#+TITLE: DotEmacs
#+AUTHOR: Tristan Seligmann
#+PROPERTY: header-args  :tangle yes

* Table of Content                                                      :TOC:
- [[#bootstrap][Bootstrap]]
  - [[#global-stuff][Global stuff]]
  - [[#hydra][Hydra]]
  - [[#midnight-mode][Midnight mode]]
- [[#packages][Packages]]
  - [[#autorevert][Autorevert]]
  - [[#org][Org]]
  - [[#autocomplete][Autocomplete]]
  - [[#debian-stuff][Debian stuff]]
  - [[#magit][Magit]]
- [[#languages][Languages]]
  - [[#lsp][LSP]]
  - [[#clojure][Clojure]]
  - [[#misc-modes][Misc modes]]
- [[#the-remaining-mess][The remaining mess]]

* Bootstrap

** Global stuff

*** Garbage-collect on focus-out.

    #+BEGIN_SRC emacs-lisp
      (add-hook 'focus-out-hook #'garbage-collect)
    #+END_SRC

*** TODO Enable gcmh

*** Enable keybinding

    #+BEGIN_SRC emacs-lisp
      (require 'bind-key)
    #+END_SRC

*** Snag shell configuration

    Use =exec-path-from-shell= rather than duplicating things.

    #+BEGIN_SRC emacs-lisp
      (use-package exec-path-from-shell
        :config
        (setq exec-path-from-shell-check-startup-files nil
              exec-path-from-shell-variables '("PATH")
              exec-path-from-shell-arguments nil)
        (exec-path-from-shell-initialize))
    #+END_SRC

*** Emacs server

    Run in server mode so we can edit things with emacsclient.

    #+begin_src emacs-lisp
      (when window-system
        (add-hook 'after-init-hook 'server-start t))
    #+end_src

** Hydra

   Cool keybinding thing.

   #+begin_src emacs-lisp
     (use-package hydra)
     (use-package use-package-hydra
       :after hydra)
   #+end_src

** Midnight mode

   Clean up idle buffers at midnight.

   #+begin_src emacs-lisp
     (use-package midnight
       :defer 1000
       :init (midnight-mode t))
   #+end_src

* Packages

** Autorevert

   This reverts unmodified buffers when the file changes externally. Without
   this they would become modified buffers with the old content.

   #+BEGIN_SRC emacs-lisp
     (use-package autorevert
       :config
       ;; Also auto refresh dired, but be quiet about it
       (setq global-auto-revert-non-file-buffers t)
       (setq auto-revert-verbose nil)
       :custom
       (global-auto-revert-mode t))
   #+END_SRC

** Org

   This file is organized with =org-mode=.

   #+BEGIN_SRC emacs-lisp
     (use-package org
       :config
       (setq org-log-done 'time
             org-support-shift-select t)
       (require 'org-tempo)
       :hook ((org-mode . toc-org-enable))
       :bind
       (:map org-mode-map
             ("<" . (lambda () (interactive)
                      (if (or (region-active-p) (looking-back "^\\s-*" (line-beginning-position)))
                          (hydra-org-template/body)
                        (self-insert-command 1)))))
       :hydra
       ;; From https://github.com/abo-abo/hydra/wiki/Org-mode-block-templates
       (hydra-org-template
        (:color blue :hint nil)
        "
      _c_enter  _q_uote     _e_macs-lisp    _L_aTeX:
      _l_atex   _E_xample   _p_erl          _i_ndex:
      _a_scii   _v_erse     _P_erl tangled  _I_NCLUDE:
      _s_rc     _n_ote      plant_u_ml      _H_TML:
      _h_tml    ^ ^         ^ ^             _A_SCII:
     "
        ("s" (hot-expand "<s"))
        ("E" (hot-expand "<e"))
        ("q" (hot-expand "<q"))
        ("v" (hot-expand "<v"))
        ("n" (hot-expand "<note"))
        ("c" (hot-expand "<c"))
        ("l" (hot-expand "<l"))
        ("h" (hot-expand "<h"))
        ("a" (hot-expand "<a"))
        ("L" (hot-expand "<L"))
        ("i" (hot-expand "<i"))
        ("e" (hot-expand "<s" "emacs-lisp"))
        ("p" (hot-expand "<s" "perl"))
        ("u" (hot-expand "<s" "plantuml :file CHANGE.png"))
        ("P" (hot-expand "<s" "perl" ":results output :exports both :shebang \"#!/usr/bin/env perl\"\n"))
        ("I" (hot-expand "<I"))
        ("H" (hot-expand "<H"))
        ("A" (hot-expand "<A"))
        ("<" self-insert-command "ins")
        ("o" nil "quit")))

     (defun hot-expand (str &optional mod header)
       "Expand org template.

     STR is a structure template string recognised by org like <s. MOD is a
     string with additional parameters to add the begin line of the
     structure element. HEADER string includes more parameters that are
     prepended to the element after the #+HEADER: tag."
       (let (text)
         (when (region-active-p)
           (setq text (buffer-substring (region-beginning) (region-end)))
           (delete-region (region-beginning) (region-end))
           (deactivate-mark))
         (when header (insert "#+HEADER: " header) (forward-line))
         (insert str)
         (org-tempo-complete-tag)
         (when mod (insert mod) (forward-line))
         (when text (insert text))))
   #+END_SRC

   Maintain a TOC at the first heading that has a =:TOC:= tag.

   #+BEGIN_SRC emacs-lisp
     (use-package toc-org :after org)
   #+END_SRC

** Autocomplete

   I use company for this.

   #+begin_src emacs-lisp
     (use-package company
       :diminish company-mode
       :defer 1000
       :config
       (global-company-mode 1)
       (setq company-minimum-prefix-length 1
             company-idle-delay 0.1))
   #+end_src

** Debian stuff

   #+begin_src emacs-lisp
     (use-package debian-el)
     (use-package dpkg-dev-el
       :mode
       ("/debian/*NEWS" . debian-changelog-mode)
       ("NEWS.Debian" . debian-changelog-mode)
       ("/debian/\\([[:lower:][:digit:]][[:lower:][:digit:].+-]+\\.\\)?changelog\\'" . debian-changelog-mode)
       ("changelog.Debian" . debian-changelog-mode)
       ("changelog.dch" . debian-changelog-mode)
       ("/debian/control\\'" . debian-control-mode)
       ("debian/.*copyright\\'" . debian-copyright-mode)
       ("\\`/usr/share/doc/.*/copyright" . debian-copyright-mode)
       ("debian/.*README.*Debian$" . readme-debian-mode)
       ("^/usr/share/doc/.*/README.*Debian.*$" . readme-debian-mode))
   #+end_src

** Magit

   The most awesome git frontend.

   #+begin_src emacs-lisp
     (use-package magit
       :bind ("C-x g" . magit-status))
     (use-package smerge-mode
       :config
       (defhydra smerge-hydra
         (:color pink :hint nil :post (smerge-auto-leave))
         "
     ^Move^       ^Keep^               ^Diff^                 ^Other^
     ^^-----------^^-------------------^^---------------------^^-------
     _n_ext       _b_ase               _<_: upper/base        _C_ombine
     _p_rev       _u_pper              _=_: upper/lower       _r_esolve
     ^^           _l_ower              _>_: base/lower        _k_ill current
     ^^           _a_ll                _R_efine
     ^^           _RET_: current       _E_diff
     "
         ("n" smerge-next)
         ("p" smerge-prev)
         ("b" smerge-keep-base)
         ("u" smerge-keep-upper)
         ("l" smerge-keep-lower)
         ("a" smerge-keep-all)
         ("RET" smerge-keep-current)
         ("\C-m" smerge-keep-current)
         ("<" smerge-diff-base-upper)
         ("=" smerge-diff-upper-lower)
         (">" smerge-diff-base-lower)
         ("R" smerge-refine)
         ("E" smerge-ediff)
         ("C" smerge-combine-with-next)
         ("r" smerge-resolve)
         ("k" smerge-kill-current)
         ("ZZ" (lambda ()
                 (interactive)
                 (save-buffer)
                 (bury-buffer))
          "Save and bury buffer" :color blue)
         ("q" nil "cancel" :color blue))
       :hook (magit-diff-visit-file . (lambda ()
                                        (when smerge-mode
                                          (smerge-hydra/body)))))
   #+end_src

* Languages

** LSP

   LSP is a standardized protocol for editors to connect to IDE-like backends.

    #+begin_src emacs-lisp
      (use-package lsp-mode
        :init (setq lsp-keymap-prefix "C-l")
        :hook ((haskell-mode . lsp)
               (lsp-mode . lsp-enable-which-key-integration))
        :commands lsp)
      (use-package lsp-ui
        :after lsp-mode
        :diminish
        :config
        ;; Dumb hack until h-l-s supports hlint; breaks everything !Haskell
        (flycheck-add-next-checker 'lsp-ui 'haskell-hlint)
        (setq lsp-ui-doc-use-webkit t)
        :commands lsp-ui-mode)
      (use-package lsp-haskell
        :config
        (setq lsp-haskell-process-path-hie "haskell-language-server")
        (setq lsp-haskell-process-args-hie '())
        ;; Comment/uncomment this line to see interactions between lsp client/server.
        ;;(setq lsp-log-io t)
        )
      (use-package lsp-treemacs
        :commands lsp-treemacs-errors-list)
      (use-package company-lsp
        :after company
        :config (push 'company-lsp company-backends)
        :defer t
        :custom (company-lsp-cache-candidates 'auto))
    #+end_src

** TODO Clojure

   Need to add LSP stuff.

   #+begin_src emacs-lisp
     (use-package clojure-mode)
   #+end_src

** Misc modes

   A bunch of simple major modes.

   #+begin_src emacs-lisp
     (use-package csv-mode)
     (use-package dockerfile-mode)
     (use-package fish-mode)
     (use-package markdown-mode)
     (use-package puppet-mode)
     (use-package toml-mode)
     (use-package yaml-mode)
   #+end_src

* The remaining mess

  #+begin_src emacs-lisp
    (use-package dash)
    (use-package drag-stuff)
    (use-package elixir-mode)
    (use-package find-file-in-repository
      :bind ("C-x C-f" . find-file-in-repository))
    (use-package flycheck)
    (use-package flycheck-pyflakes)
    (use-package go-mode)
    (use-package haskell-mode)
    (use-package htmlize)
    (use-package js2-mode)
    (use-package forge
      :after (magit))
    (use-package nix-mode)
    (use-package ormolu)
    (use-package paredit
      :hook (clojure-mode . paredit-mode))
    (use-package popwin)
    (use-package powerline)
    (use-package prodigy)
    (use-package projectile)
    (use-package py-isort)
    (use-package python-docstring
      :hook (python-mode . python-docstring-mode))
    (use-package rainbow-delimiters
      :hook (clojure-mode . rainbow-delimiters-mode))
    (use-package s)
    (use-package sass-mode)
    (use-package scss-mode)
    (use-package smartparens)
    (use-package smex)
    (use-package secrets)
    (use-package solarized-theme)
    (use-package terraform-mode
      :config
      (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode))
    (use-package web-mode)
    (use-package which-key
      :diminish
      :config (which-key-mode))
    (use-package whitespace-cleanup-mode
      :diminish whitespace-cleanup-mode
      :init
      (setq whitespace-cleanup-mode-only-if-initially-clean nil
            whitespace-line-column 80
            whitespace-style '(face lines-tail))
      :config
      (global-whitespace-mode)
      (global-whitespace-cleanup-mode))
    (use-package yasnippet)

    (setenv "GOPATH" "$HOME" t)

    (put 'test-case-name 'safe-local-variable 'symbolp)
    (add-to-list 'initial-frame-alist '(fullscreen . maximized))

    (setq python-environment-directory "~/deployment/virtualenvs")


    (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . web-mode))
    (setq web-mode-content-types-alist
          '(("jsx" . "\\.jsx?\\'")))
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    (add-hook 'web-mode-hook
              (lambda ()
                (when (equal web-mode-content-type "jsx")
                  ;; enable flycheck
                  (flycheck-select-checker 'javascript-eslint)
                  (flycheck-mode))))
    (flycheck-define-checker python-twistedchecker
      "A Python syntax and style checker using twistedchecker."
      :command ("twistedchecker"
                ;; Need `source-inplace' for relative imports (e.g. `from .foo
                ;; import bar'), see https://github.com/flycheck/flycheck/issues/280
                source-inplace)
      :error-filter
      (lambda (errors)
        (flycheck-sanitize-errors (flycheck-increment-error-columns errors)))
      :error-patterns
      ((error line-start (or "E" "F") (id (one-or-more (not (any ":")))) ":"
              (zero-or-more " ") line "," column ":" (message) line-end)
       (warning line-start (or "W" "R" "C") (id (one-or-more (not (any ":")))) ":"
                (zero-or-more " ") line "," column ":" (message) line-end))
      :modes 'python-mode)
    (add-to-list 'flycheck-checkers 'python-twistedchecker 'append)
    (flycheck-add-next-checker 'python-twistedchecker 'python-flake8)
    (add-hook 'python-mode-hook
              (lambda () (flycheck-select-checker 'python-flake8)))
  #+end_src

*** [[file:custom.el][custom.el]]

    Put customization in another file.

    #+BEGIN_SRC emacs-lisp
      (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
      (when (file-exists-p custom-file)
        (load custom-file))
    #+END_SRC
